/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
/*
 * this include needs to be first (or at least early) because it defines an RC()
 * macro that overrides the RC macro we use for defining our matrix transform.
 * so we need to include this first to reference CAPS below, and then override
 * its RC with a later include.
 */
#include <dt-bindings/zmk/keys.h>

#include <nordic/nrf52840_qiaa.dtsi>
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/rgb.h>


/ {
    model = "tahoe, rev_a";
    compatible = "tahoe,rev_a";

    chosen {
            zephyr,code-partition = &code_partition;
            zephyr,sram = &sram0;
            zephyr,flash = &flash0;
            zmk,battery = &fuelgauge;
            zmk,kscan = &kscan;
            zmk,matrix_transform = &default_transform;
            zmk,underglow = &led_strip;
            /* zephyr,console = &cdc_acm_uart; */
    };

    macros {
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>       // Switch to Bluetooth output
                , <&bt BT_SEL 0>       // Select profile 0 (first profile)
                ;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>       // Switch to Bluetooth output
                , <&bt BT_SEL 1>       // Select profile 1 (second profile)
                ;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>       // Switch to Bluetooth output
                , <&bt BT_SEL 2>       // Select profile 2 (third profile)
                ;
        };

        caps_with_led: caps_with_led {
            label = "CAPS_WITH_LED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            // this is a bit wrong, because it just toggles caps lock & the LED
            // together. for example, if you connect to a laptop that already
            // has caps lock on and the LED is currently off, then hitting the
            // caps lock key will turn off caps lock but turn on the LED. but,
            // it's a quick way to get something basic working that'll handle
            // most cases just fine.
            bindings
                = <&kp CAPS>
                , <&rgb_ug RGB_COLOR_HSB(128,100,100)>
                , <&rgb_ug RGB_TOG>;
        };
    };

    // bridges from the kscan below (which contains GPIO coordinates/pins
    // that can emit keypress events) to the keymap in tahoe_a.keymap.
    default_transform: matrix_transform {
            compatible = "zmk,matrix-transform";
            rows = <11>;
            columns = <16>;

            map = <
                    RC(0,0)  RC(0,1)  RC(1,1)  RC(0,2)  RC(1,2)  RC(0,3)  RC(1,3)  RC(0,4)  RC(1,4)  RC(0,5)  RC(1,5)  RC(0,6)  RC(1,6)           RC(1,7)
                    RC(2,0)  RC(3,0)  RC(2,1)  RC(3,1)  RC(2,2)  RC(3,2)  RC(2,3)  RC(3,3)  RC(2,4)  RC(3,4)  RC(2,5)  RC(3,5)  RC(2,6)  RC(3,6)           RC(3,7)
                    RC(4,0)  RC(5,0)  RC(4,1)  RC(5,1)  RC(4,2)  RC(5,2)  RC(4,3)  RC(5,3)  RC(4,4)  RC(5,4)  RC(4,5)  RC(5,5)  RC(4,6)  RC(5,6)           RC(5,7)
                    RC(6,0)  RC(7,0)  RC(6,1)  RC(7,1)  RC(6,2)  RC(7,2)  RC(6,3)  RC(7,3)  RC(6,4)  RC(7,4)  RC(6,5)  RC(7,5)                    RC(6,7)  RC(7,7)
                    RC(8,0)           RC(8,1)  RC(9,1)  RC(8,2)  RC(9,2)  RC(8,3)  RC(9,3)  RC(8,4)  RC(9,4)  RC(8,5)  RC(9,5)  RC(8,6)  RC(9,6)           RC(9,7)
                    RC(10,0) RC(11,0) RC(11,1) RC(10,1)                                                       RC(10,5) RC(11,5) RC(10,6) RC(11,6) RC(10,7) RC(11,7)
                    RC(12,0)
                    RC(13,0)
                    RC(14,0)
                    RC(15,0)
                    RC(16,0)
            >;


    };


    kscan: kscan {
        compatible = "zmk,kscan-composite";
        rows = <17>;
        columns = <8>;
        keys {
            kscan = <&kscan_keys>;
        };
        switch {
            row-offset = <12>;
            kscan = <&kscan_switch>;
        };
    };

    // determines which GPIO pins to scan for key press events
    kscan_keys: kscan_keys {
            compatible = "zmk,kscan-gpio-matrix";
            diode-direction = "row2col";
            // 12 rows
            row-gpios
                    = <&gpio0 12 GPIO_ACTIVE_HIGH>
                    , <&gpio0 4 GPIO_ACTIVE_HIGH>
                    , <&gpio0 17 GPIO_ACTIVE_HIGH>
                    , <&gpio0 8 GPIO_ACTIVE_HIGH>
                    , <&gpio0 29 GPIO_ACTIVE_HIGH>
                    , <&gpio0 6 GPIO_ACTIVE_HIGH>
                    , <&gpio0 31 GPIO_ACTIVE_HIGH>
                    , <&gpio0 5 GPIO_ACTIVE_HIGH>
                    , <&gpio0 30 GPIO_ACTIVE_HIGH>
                    , <&gpio1 9 GPIO_ACTIVE_HIGH>
                    , <&gpio1 2 GPIO_ACTIVE_HIGH>
                    , <&gpio1 4 GPIO_ACTIVE_HIGH>
                    ;
            // 8 columns
            col-gpios
                    = <&gpio1 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio1 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio0 28 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio0  3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio1  6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    , <&gpio1  0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
                    ;
    };

    kscan_switch: kscan_switch {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
        toggle-mode;

        // 5 rows
        row-gpios
                =  <&extra_gpio 1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
                 , <&extra_gpio 2 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
                 , <&extra_gpio 3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
                 , <&extra_gpio 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
                 , <&extra_gpio 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
                ;
        // 1 column
        col-gpios
                = <&extra_gpio 8 (GPIO_ACTIVE_LOW)>
                ;
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&right_encoder>;
    };

    right_encoder: right_encoder {
        compatible = "alps,ec11";
        status = "okay";
        a-gpios = <&extra_gpio  9 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&extra_gpio 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <20>;
    };
};

&gpio0 {
    status = "okay";
};

&gpio1 {
	status = "okay";
};

&usbd {
    status = "okay";
};

zephyr_udc0: &usbd {
    status = "okay";
};

&pinctrl {
       i2c0_default: i2c0_default {
               group1 {
                       psels = <NRF_PSEL(TWIM_SDA, 0, 24)>,
                               <NRF_PSEL(TWIM_SCL, 0, 13)>;
                       bias-pull-up;
               };
       };

       i2c0_sleep: i2c0_sleep {
               group1 {
                       psels = <NRF_PSEL(TWIM_SDA, 0, 24)>,
                               <NRF_PSEL(TWIM_SCL, 0, 13)>;
                       low-power-enable;
                       bias-pull-up;
               };
       };

       spi1_default: spi1_default {
           group1 {
               psels = <NRF_PSEL(SPIM_MOSI, 0, 26)>;
           };
       };

       spi1_sleep: spi1_sleep {
           group1 {
               psels = <NRF_PSEL(SPIM_MOSI, 0, 26)>;
               low-power-enable;
           };
       };

};

&i2c0 {
    compatible = "nordic,nrf-twim";
    pinctrl-0 = <&i2c0_default>;
    pinctrl-1 = <&i2c0_sleep>;
    pinctrl-names = "default", "sleep";
    clock-frequency = <100000>;
    status = "okay";

    fuelgauge: max17048@36 {
        compatible = "zmk,maxim-max17048";
        reg = <0x36>;
        status = "okay";
    };

    extra_gpio: mcp23017@20 {
        compatible = "microchip,mcp230xx";
        gpio-controller;
        status = "okay";
        reg = <0x20>;
        #gpio-cells = <2>;
        ngpios = <16>;
        int-gpios = <&gpio0 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        gpio-reserved-ranges = <0 1>, <6 2>, <10 5>;

    };
};

&spi3 {
  compatible = "nordic,nrf-spim";
  status = "okay";

  pinctrl-0 = <&spi1_default>;
  pinctrl-1 = <&spi1_sleep>;
  pinctrl-names = "default", "sleep";

  // SK6812MINI-E
  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";
    label = "WS2812";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    chain-length = <1>; /* number of LEDs */
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;
    color-mapping = <LED_COLOR_ID_GREEN
                     LED_COLOR_ID_RED
                     LED_COLOR_ID_BLUE>;
  };
};

&flash0 {
	/*
	 * For more information, see:
	 * http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
	 */
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "softdevice";
			reg = <0x00000000 0x00026000>;
		};
		code_partition: partition@26000 {
			label = "code_partition";
			reg = <0x00026000 0x000c6000>;
		};

		/*
		 * The flash starting at 0x000ec000 and ending at
		 * 0x000f3fff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@ec000 {
			label = "storage";
			reg = <0x000ec000 0x00008000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};
