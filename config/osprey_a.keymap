/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// I am using Win + Arrows for tiling, LG(code) hoewever caused some glitches with sending both LGUI + arrow and then LGUI separately.
// This leadis to unwanted opening of the start menu. These macros work around this issue.

/ {
    macros {
        lgleft: lgleft {
            label = "lgleft";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LWIN>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LWIN>;
        };
        lgright: lgright {
            label = "lgright";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LWIN>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LWIN>;
        };
        lgup: lgup {
            label = "lgup";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LWIN>,
                <&macro_tap>,
                <&kp UP>,
                <&macro_release>,
                <&kp LWIN>;
        };
        lgdown: lgdown {
            label = "lgdown";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LWIN>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp LWIN>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T                 &kp Y  &kp U     &kp I      &kp O    &kp P      &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G                 &kp H  &kp J     &kp K      &kp L    &kp SEMI   &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B                 &kp N  &kp M     &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                         &kp LALT  &mo 1  &kp SPACE  &kp ENTER  &mo 2  &kp RALT
            >;
        };

        nav_layer {
            bindings = <
&kp ESC  &kp N1           &kp N2  &kp N3    &kp N4  &kp N5          &kp N6    &kp N7    &kp N8  &kp N9     &kp N0           &kp DEL
&trans   &trans           &trans  &trans    &trans  &trans          &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp NON_US_HASH  &trans
&trans   &kp NON_US_BSLH  &trans  &trans    &trans  &trans          &lgleft   &lgdown   &lgup   &lgright   &trans           &trans
                                  &kp LWIN  &trans  &trans  &trans  &mo 3     &kp RALT
            >;
        };

        symbol_layer {
            bindings = <
&kp GRAVE      &kp LS(N1)           &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)          &kp LS(N6)     &kp LS(N7)     &kp LS(N8)    &kp LS(N9)    &kp LS(N0)           &trans
&kp LS(GRAVE)  &trans               &trans      &trans      &trans      &trans              &kp MINUS      &kp EQUAL      &kp LBKT      &kp RBKT      &kp NON_US_HASH      &kp GRAVE
&trans         &kp LS(NON_US_BSLH)  &trans      &trans      &trans      &trans              &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(LBKT)  &kp LS(RBKT)  &kp LS(NON_US_HASH)  &kp LS(GRAVE)
                                                &kp LWIN    &mo 3       &trans      &trans  &trans         &trans
            >;
        };

        F_layer {
            bindings = <
&kp F1      &kp F2        &kp F4        &kp F4        &kp F5  &kp F6               &kp F7    &kp F8     &kp F9     &kp F10  &kp F11  &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &sys_reset           &kp HOME  &kp PG_DN  &kp PG_UP  &kp END  &trans   &trans
&trans      &trans        &trans        &trans        &trans  &bootloader          &trans    &trans     &trans     &trans   &trans   &trans
                                        &trans        &trans  &trans       &trans  &trans    &trans
            >;
        };
    };
};
